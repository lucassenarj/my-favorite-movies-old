{"version":3,"sources":["components/layout/Header.js","components/layout/Layout.js","services/movies.js","components/card/CardBox.js","pages/home/HomePage.js","pages/movie-details/MovieDetailsPage.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Menu","fixed","inverted","Container","Item","header","react_router_dom","to","Image","size","src","style","marginRight","Dropdown","item","simple","text","Divider","className","Layout","props","react","layout_Header","children","getPopularMovies","axios","get","concat","process","then","movies","data","results","CardBox","Card","image","info","poster_path","title","meta","overview","as","Link","url","toLowerCase","replace","extra","Icon","name","vote_average","HomePage","state","show","componentWillMount","_callee","regenerator_default","wrap","_context","prev","next","sent","_this","setState","stop","marginTop","elements_Header_Header","Group","itemsPerRow","this","map","movie","card_CardBox","key","id","Component","MovieDetailsPage","match","params","Boolean","window","location","hostname","app","history","createBrowserHistory","basename","layout_Layout","react_router","path","component","exact","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c340e17.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Dropdown, Image, Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => (\n  <Menu fixed='top' inverted>\n    <Container>\n      <Menu.Item header>\n        <Link to='/'>\n          <Image size='mini' src='/logo.png' style={{ marginRight: '1.5em' }} />\n          My Favorite Movies\n        </Link>\n      </Menu.Item>\n      <Menu.Item><Link to='/'>Home</Link></Menu.Item>\n\n      <Dropdown item simple text='Dropdown'>\n        <Dropdown.Menu>\n          <Dropdown.Item>List Item</Dropdown.Item>\n          <Dropdown.Item>List Item</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Header>Header Item</Dropdown.Header>\n          <Dropdown.Item>\n            <i className='dropdown icon' />\n            <span className='text'>Submenu</span>\n            <Dropdown.Menu>\n              <Dropdown.Item>List Item</Dropdown.Item>\n              <Dropdown.Item>List Item</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown.Item>\n          <Dropdown.Item>List Item</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </Container>\n  </Menu>\n)\n\nexport default Header","import React, { Fragment } from 'react'\nimport Header from './Header'\n\nconst Layout = (props) => (\n  <Fragment>\n    <Header />\n    {props.children}\n\n  </Fragment>\n)\n\nexport default Layout","import axios from 'axios'\n\nexport const getPopularMovies = () => {\n  return axios.get(`${process.env.REACT_APP_API_URL}/movie/popular${process.env.REACT_APP_API_KEY}`)\n  .then(movies => movies.data.results)\n}","\nimport React from 'react'\nimport { Card, Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\n/*\n<Link to={`games/${props.info.slug}`}>\n  More information\n</Link>\n*/\n\nconst urlFriendly = (url) => {\n  return url.toLowerCase().replace(/[^a-z0-9]+/g, \"-\").replace(/^-+|-+$/g, \"-\").replace(/^-+|-+$/g, '')\n}\n\nconst CardBox = (props) => (\n  <Card\n    image={`https://image.tmdb.org/t/p/w500/${props.info.poster_path}`}\n    header={props.info.title}\n    meta={props.info.overview}\n    as={Link}\n    to={`movies/${urlFriendly(props.info.title)}`}\n    extra={(\n      <span>\n        <Icon name='star' />\n        {props.info.vote_average}/10 \n      </span>\n    )}\n  />\n)\n\nexport default CardBox","import React, { Component } from 'react'\nimport { Card, Container, Header } from 'semantic-ui-react'\nimport { getPopularMovies } from './../../services/movies'\nimport { CardBox } from './../../components/card'\n\nclass HomePage extends Component {\n  state = {\n    show: false,\n    movies: []\n  }\n\n  componentWillMount = async () => {\n    const movies = await getPopularMovies();\n\n    this.setState(() => ({\n      show: true,\n      movies\n    }))\n  }\n\n  render() {\n    return (\n      <Container style={{ marginTop: '5em' }}>\n        <Header as='h1'>Popular Movies</Header>\n        <Card.Group itemsPerRow={4}>\n          {this.state.show && this.state.movies.map(movie => <CardBox key={movie.id} info={movie} />)}\n        </Card.Group>\n      </Container>\n    )\n  }\n}\n\nexport default HomePage","import React, { Component } from 'react'\nimport { Container, Header } from 'semantic-ui-react'\n\nclass MovieDetailsPage extends Component {\n  render() {\n    return (\n      <Container style={{ marginTop: '5em' }}>\n        <Header as='h1'>\n          {this.props.match.params.id}\n        </Header>\n      </Container>\n    )\n  }\n}\n\nexport default MovieDetailsPage\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter, Route, Switch } from 'react-router-dom'\nimport { createBrowserHistory } from 'history';\nimport Layout from './components/layout/Layout'\nimport { HomePage, MovieDetailsPage } from './pages'\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n  <BrowserRouter history={createBrowserHistory()} basename=\"/my-favorite-movies/\">\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={HomePage} exact={true} />\n        <Route path=\"/movies/:id\" component={MovieDetailsPage} />\n      </Switch>\n    </Layout>\n  </BrowserRouter>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}